apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - name: app
        image: your-app-image:tag
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config
          mountPath: /app/configs/.env
          subPath: docker.env
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: app-config
      - name: logs
        persistentVolumeClaim:
          claimName: logs

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:5
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodata
          mountPath: /data/db
      volumes:
      - name: mongodata
        persistentVolumeClaim:
          claimName: mongodata

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.9.0
        ports:
        - containerPort: 3100
        args:
        - -config.file=/etc/loki/local-config.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: promtail
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:2.9.0
        args:
        - -config.file=/etc/promtail/config.yml
        volumeMounts:
        - name: logs
          mountPath: /var/log
        - name: promtail-config
          mountPath: /etc/promtail/config.yml
          subPath: promtail.yml
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: logs
      - name: promtail-config
        configMap:
          name: promtail-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        volumeMounts:
        - name: grafanadata
          mountPath: /var/lib/grafana
      volumes:
      - name: grafanadata
        persistentVolumeClaim:
          claimName: grafanadata

